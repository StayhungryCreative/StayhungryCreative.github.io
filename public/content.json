{"posts":[{"title":"Git 使用教程","text":"按照 git 常用的操作来记录 1、git config 配置本机信息 12345## 配置本机的name和emailgit config --global user.name &quot;github用户名&quot;git config --global user.email &quot;github注册使用的邮箱地址&quot; ## 查看当前配置git config -l # 或者 git config --list 2、git init 将本地当前目录初始化为本地 Git 仓库 1git init #如果没有初始化为 git 仓库，后面所有操作都会报错 3、git add 将本地文件添加到缓存区 12git add --all #最简单无脑的操作，区域所有文件修改都提交，包括删除文件git add . # 同上，但不记录删除操作 4、git commit 提交本地文件的更改到本地 Git 仓库 1git commit -m &quot;the 1st try&quot; 5、git remote 添加远程 Git 仓库 12345678910111213# 添加远程仓库并指定名称git remote add &lt;远程仓库别名&gt; &lt;remote_url&gt;## 举例git remote add origin git@github.com:StayhungryCreative/test.git # 此处的origin是远程仓库的别名，可以改成任意其她名称# 删除关联指定名称的远程仓库git remote rm &lt;远程仓库别名&gt;## 举例git remote rm origin## 验证远程Git仓库是否添加成功git remotegit remote -v 6、git push 将本地 Git 仓库的更新推送到远程Git仓库 12345678910111213git push &lt;远程仓库名&gt; &lt;本地仓库分支名&gt;:&lt;远程仓库分支名&gt; ## 举例git push origin master # 🌳 省略了远程分支名，结果是：本地的master分支推送到origin主机的master分支，如果远程不存在master分支，则新建。git push origin master:20250105# 删除远程主机的分支git push &lt;远程仓库名&gt; --delete &lt;远程仓库分支名&gt;git push &lt;远程仓库名&gt; :&lt;远程仓库分支名&gt;## 举例git push origin :master # 删除远程主机的master分支# 将本地的master分支推动到远程origin仓库，同时指定origin为默认远程仓库git push -u origin master","link":"/2025/01/05/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"title":"Hexo + Github Pages + Github Actions实现博客存档和自动推送","text":"1、Hexo 的推送策略在使用 GitHub Actions 部署 Hexo 博客时，通常将 Hexo 的源代码和生成的静态文件分开管理，通过分支或独立仓库实现隔离。 1.1 Hexo 源代码仓库 Hexo 的配置文件、主题文件等存储在源代码仓库（放在 main 分支） 通过 deploy.yml 文件生成静态文件并推送到目标分支。 1.2 静态文件部署仓库/分支 生成的静态文件通常会被部署到 gh-pages 分支，或一个独立的仓库。 GitHub Actions 自动处理文件生成与推送，无需手动管理。 2、单仓库 多分枝管理当前我采用这一策略，**将 Hexo 源代码保存在 main（或 master）分支，静态文件部署到 gh-pages 分支。**此处步骤记录不完整，如果你想从零开始搭建，可参考 Ubuntu + Hexo + Github Pages 搭建个人博客。 1、Hexo 项目本地初始化 1234567# 建站，初始化 Hexo 项目hexo init StayhungryCreativecd StayhungryCreativenpm install# 安装 Hexo 部署到 github 的插件npm install hexo-deployer-git --save 2、配置 Hexo 项目根目录下的 _config.yml 文件，找到 deploy 配置项，修改如下： 1234deploy: type: git # 部署方式，这里选择 git repo: git@github.com:StayhungryCreative/StayhungryCreative.github.io.git # 仓库地址，指向你的远程仓库 branch: gh-pages #main 静态文件生成后推送到的分支 3、配置 .github/workflows/deploy.yml 文件 12mkdir -p .github/workflowstouch .github/workflows/deploy.yml deploy.yml 中指定工作流触发的分支，文件内容如下 1234567891011121314151617181920212223242526272829303132name: Deploy Hexo Blog # Workflow 的名称，可自由修改为更具描述性的名字on: # 定义触发条件 push: # 当发生 push 操作时触发 branches: # 监控哪些分支 - main # 这里默认是主分支，如果你的分支名是master或其他名称，需要改成对应分支名jobs: # 定义工作流程的任务 build: # 工作任务的名称，可自由命名 runs-on: ubuntu-latest # 指定运行环境为最新的 Ubuntu 系统 steps: # 任务的步骤 - name: Checkout code # 检查代码 uses: actions/checkout@v3 # 使用 GitHub 提供的官方代码检查工具 - name: Setup Node.js # 设置 Node.js 环境 uses: actions/setup-node@v3 # 使用 GitHub 提供的 Node.js 设置工具 with: node-version: '23' # 指定 Node.js 版本（根据 Hexo 使用的版本修改） - name: Install dependencies # 安装依赖 run: npm install # 在项目中安装 Hexo 和插件的依赖 - name: Build Hexo # 生成静态文件 run: npx hexo generate # 运行 Hexo 命令，生成 public 文件夹 - name: Deploy to GitHub Pages # 部署到 GitHub Pages uses: peaceiris/actions-gh-pages@v3 # 使用 peaceiris 提供的 GitHub Pages 部署工具 with: github_token: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Actions 自动生成的 Token（权限令牌） publish_branch: gh-pages # 指定静态文件生成后推送到 gh-pages 分支 publish_dir: ./public # 指定要部署的文件夹，Hexo 默认生成到 public 目录 4、首次手动部署 123hexo cleanhexo generatehexo deploy 5、提交代码并自动推送博客，后续只用执行这三行代码就可实现存档+推送博客 12345678910# 1、创建并初始化 Git 仓库git initgit remote add origin git@github.com:StayhungryCreative/StayhungryCreative.github.io.gitgit remote -vgit branch -M main ## ♥ 强制重命名，将本地仓库的分支名称从 master 改为 main# 2、提交代码git add .git commit -m &quot;Initialize Hexo Blog&quot;git push origin main # 源代码提交到 main 分支 6、启用 GitHub Pages 打开仓库的 Settings &gt; Pages 页面，选择 gh-pages 分支作为部署源，即可网页查看博客。 3、双仓库管理没有实操过，但方法看着很合理，和“单仓库 多分枝管理”步骤相同的部分直接略过，仅记录不同点。 0、将 Hexo 源代码和静态文件分别存放在两个不同的仓库： 仓库 A：存储 Hexo 源代码，例如 blog-src。 仓库 B：存储生成的静态文件，例如 blog-deploy。 2、配置 Hexo 项目根目录下的 _config.yml 文件，找到 deploy 配置项，修改如下： 1234deploy: type: git # 部署方式，这里选择 git repo: git@github.com:StayhungryCreative/blog-deploy.git # 仓库地址，指向存放静态文件的仓库 branch: main #静态文件生成后推送到的分支 3、deploy.yml 文件内容如下 1234567- name: Deploy to GitHub Pages # 步骤名称：部署到 GitHub Pages uses: peaceiris/actions-gh-pages@v3 # 使用 peaceiris 提供的 GitHub Pages 部署工具 with: github_token: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Actions 自动生成的 Token（权限令牌） external_repository: StayhungryCreative/blog-deploy # 指定部署静态文件的仓库 publish_branch: main # 指定静态文件生成后推送到仓库 B 的 main 分支 publish_dir: ./public # 指定要部署的文件夹，Hexo 默认生成到 public 目录 5、提交代码并自动推送博客，后续只用执行这三行代码就可实现存档+推送博客 1234567891011# 1、创建并初始化 Git 仓库git init## 源代码提交到 blog-src 仓库git remote add origin git@github.com:StayhungryCreative/blog-src.gitgit remote -vgit branch -M main ## ♥ 强制重命名，将本地仓库的分支名称从 master 改为 main# 2、提交代码git add .git commit -m &quot;Initialize Hexo Blog&quot;git push origin main # 源代码提交到 main 分支 6、启用 GitHub Pages 打开仓库 blog-deploy 的 Settings &gt; Pages 页面，选择 main 分支作为部署源，即可网页查看博客。 4、方式对比感觉两种方式实际使用应该没多大差别，表格可信度&lt;4分（10分为满分） 功能 单仓库（多分支） 双仓库 管理难度 简单 稍复杂 分离性 源代码和静态文件在一个仓库内 源代码和静态文件完全分离 适合场景 小型博客，单用户维护 大型博客，多用户协作 GitHub Actions 支持 内置支持 增加一步，配置 external_repository","link":"/2025/01/08/Hexo%20+%20Github%20Pages%20+%20Github%20Actions%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%AD%98%E6%A1%A3%E5%92%8C%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/"},{"title":"Ubuntu + Hexo + Github Pages 搭建个人博客","text":"参考资料 https://blog.csdn.net/wang_da_bing/article/details/82818445 https://www.cnblogs.com/microxiami/p/12641163.html 资料讲的很详细，因此我只简单总结不熟练的步骤。完成 1-3 将获得一个空白的 gitlab 博客界面，完成 4 将创建自己的第一篇博客，撒花！！！ 1、预备工作1234567891011121314151617181920212223242526272829# 1、安装gitsudo apt-get install git-core# 2、安装nvm## 安装依赖包sudo apt-get updatesudo apt-get install build-essential libssl-dev## 安装nvmcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash## 验证nvm装好了nvm -v 或者 nvm --version# 3、安装node、npmnvm install node # nvm install stable（功能和上一步相同，也是安装 node，pass）## 验证node、npm安装好了node -vnpm -v# 4、安装hexo，一个博客框架，用来生成静态网页npm install -g hexo-cli## 建站hexo init &lt;folder&gt; #hexo init StayhungryCreativecd &lt;folder&gt; #cd StayhungryCreativenpm install## 生成静态页面hexo g # 或者 hexo generate## 启动服务器hexo s # 或者 hexo server## 用 http://localhost:4000/ 预览 2、ssh 和 Git 配置生成ssh密钥对，本地配置 Git 仓库信息，步骤省略，以后忘记/有需要再补充 1234git config --global user.name &quot;github用户名&quot;git config --global user.email &quot;github注册使用的邮箱地址&quot; ssh -T git@github.com&gt; Hi StayhungryCreative! You've successfully authenticated, but GitHub does not provide shell access. 3、博客部署到 Git以下操作都是在本地生成的博客文件夹StayhungryCreative中进行 1、命令行安装hexo插件 1npm install hexo-deployer-git --save 2、文件_config.yml，打开找到Deployment，按照如下修改 12345678deploy:#type: git#repo: git@github.com:用户名/用户名.github.io.git#branch: mastertype: gitrepo: git@github.com:StayhungryCreative/StayhungryCreative.github.io.gitbranch: master 3、将博客部署到git 123hexo cleanhexo g # 或者 hexo generatehexo d # 或者 hexo deploy 4、补充内容 12# 下载的一个博客主题（使用略）git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 4、创建新博文以下操作都是在本地生成的博客文件夹StayhungryCreative中进行 1234567891011# 1、创建新文章hexo new &quot;Ubuntu搭建个人博客&quot; # 文件路径在 source/_posts/Ubuntu搭建个人博客.md## 打开该md文件撰写即可# 2、本地预览，确认内容是否有问题hexo server# 3、博文部署到 github pageshexo cleanhexo g # 或者 hexo generatehexo d # 或者 hexo deploy","link":"/2025/01/05/Ubuntu%20+%20Hexo%20+%20Github%20Pages%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"imu_tk配置教程","text":"说明：请在ubuntu18.04上安装，ubuntu22.04不可以！！！ 因为imu_tk 的 cmake 必须要qt4.x，但 ubuntu22.04 和qt4.x不适配。 1、安装 ceres-solver下载路径：http://ceres-solver.org/installation.html （需要梯子，核心内容记录如下。需下载 ceres-solver 安装包） Start by installing all the dependencies. 12345678910# CMakesudo apt-get install cmake# google-glog + gflagssudo apt-get install libgoogle-glog-dev libgflags-dev# Use ATLAS for BLAS &amp; LAPACKsudo apt-get install libatlas-base-dev# Eigen3sudo apt-get install libeigen3-dev# SuiteSparse (optional)sudo apt-get install libsuitesparse-dev We are now ready to build, test, and install Ceres. 12345678910tar zxf ceres-solver-2.2.0.tar.gzmkdir ceres-bincd ceres-bincmake ../ceres-solver-2.2.0make -j3 # 有的地方写 -j2，不清楚区别，先按官方的来make test# Optionally install Ceres, it can also be exported using CMake which# allows Ceres to be used without requiring installation, see the documentation# for the EXPORT_BUILD_DIR option for more information.sudo make install 2、安装imu_tk下载路径：https://github.com/Kyle-ak/imu_tk 1234567sudo apt-get install build-essential cmake libeigen3-dev libqt4-dev libqt4-opengl-dev freeglut3-dev gnuplotcd imu_tkmkdir buildcd buildcmake ..make cmake不通过，debug1、没有装boost 12sudo apt-get updatesudo apt-get install libboost-all-dev 2、找不到eigin参照：https://blog.csdn.net/qq_43872529/article/details/100937091 1sudo ln -s /usr/include/eigen3/Eigen /usr/include/Eigen 尾巴 一开始就该好好看 imu_tk 的说明，能少走好多弯路。慢就是快，偷懒不解决的问题后面爆雷还要解决。 走的弯路： https://blog.csdn.net/qq_36267302/article/details/127423884 https://blog.csdn.net/CAS_sweet/article/details/143331300 (这个作者对问题做了初步分析，学习ta的思路)——这个做法不可取，治标不治本！后面的方法才对。 在ubuntu22.04上试图安装imu_tk，报错如下： boost没有安装，cmake报错如下：","link":"/2024/11/07/imu_tk%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"},{"title":"工作事项TBD","text":"去噪算法整理输出笔记 ELD、PMN、PNNP 20240108晚整理 PNNP 的论文笔记 有时间的话看代码，理清 PNNP 的设计思路 参考资料 PNNP：https://zhuanlan.zhihu.com/p/14757184802 PMN：https://zhuanlan.zhihu.com/p/544592330 PMN：https://zhuanlan.zhihu.com/p/651674070 https://www.zhihu.com/people/hansen97/posts","link":"/2025/01/08/%E5%B7%A5%E4%BD%9C%E4%BA%8B%E9%A1%B9TBD/"},{"title":"开发板 + Ubuntu主机 + Windows虚拟机通信","text":"TBD：后续有时间再来补充常用指令。 非常多次出现该问题，把要点记录一下。为避免博客占用空间过大，仅文字表述不配图，所以需要有一定的开发基础。 1、开发板用网线直连到主机网口，先保证开发板 IP 和 Ubuntu 主机 IP 设置在同一网段，确保二者可以ping通。（注意：主机使用 USB 转网口的拓展坞可能存在问题，看同事没 ping 通） 2、Windows虚拟机开桥接模式，不要用NAT！桥接模式可以设置虚拟机的 IP ，将 Windows 虚拟机的 IP 和 板子/Ubuntu 主机的 IP 设置到同一网段，验证 ping 通虚拟机和 Ubuntu 主机/开发板，通信就建立好了！。（注意：三者同一网段，但是后缀要各不相同）","link":"/2025/01/10/%E5%BC%80%E5%8F%91%E6%9D%BF%20+%20Ubuntu%E4%B8%BB%E6%9C%BA%20+%20Windows%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E4%BF%A1/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Github Actions","slug":"Github-Actions","link":"/tags/Github-Actions/"},{"name":"Github Pages","slug":"Github-Pages","link":"/tags/Github-Pages/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"imu标定","slug":"imu标定","link":"/tags/imu%E6%A0%87%E5%AE%9A/"},{"name":"待办事项","slug":"待办事项","link":"/tags/%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9/"},{"name":"通信","slug":"通信","link":"/tags/%E9%80%9A%E4%BF%A1/"}],"categories":[{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"}],"pages":[{"title":"归档","text":"","link":"/archives/index.html"},{"title":"友情链接","text":"","link":"/links/index.html"}]}